package Server;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;

public class Server extends Thread 
{

    final private ServerSocket serverSocket;
    final public static int CLIENTS = 2;
    final private SubServer[] clietnsConnected = new SubServer[ CLIENTS ];
	private static String msg;
	private static String msgSend;

    public Server( int port ) throws IOException {
         this.serverSocket = new ServerSocket( port );
         start();
    }

    @Override
    public void run() {
        while ( !this.interrupted() ) {
             //wait for clients
             Socket connection = this.serverSocket.accept();
             assignConnectionToSubServer( connection );
        }
    }

    public void assignConnectionToSubServer( Socket connection ) {
         for ( int i = 0 ; i < CLIENTS ; i++ ) {

             //find an unassigned subserver (waiter)
             if ( this.clietnsConnected[ i ] == null ) {
                  this.clietnsConnected[ i ] = new SubServer( connection , i );
                  break;
             }
         }
    }

    protected class SubServer extends Thread {

        final private int clientID;
        final private Socket clientSocket;
        
        public SubServer( Socket connection , int id ) {
            this.clientID = id;
            this.clientSocket = connection;
            start();
        }

        @Override
        public void run() {
             while( !this.interrupted() ) 
             {
            	System.out.println("Accepted Client : Address - "+ clientSocket.getInetAddress().getHostName());
    			while(true)
    			{
    				if(clientID == 0)
    				{
    	     			BufferedReader br = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
    	    			OutputStreamWriter osw = new OutputStreamWriter(clientsConnected[1].getOutputStream(),"UTF-8");
    					// Get the client message
    					msg = br.readLine();
    					if(!msg.equals("Closing"))
    					{
    						msgSend = String.valueOf(rand.nextInt(40)) + "\n";
    						System.out.println("Sending Message: " + msgSend);
    						osw.write(msgSend,0,msgSend.length());
    						osw.flush();
    					}
    					else{
    						clientSocket.close();
    					}
    					Thread.sleep(1000);
    				}
    			}
             }
        }

        //as an example, if you read String messages from your client,
        //just call this method from the run() method to process the client request
        public void process( String message ) {

        }

        /**
         * terminates the connection with this client (i.e. stops serving him)
         */
        public void close() {
            try {
                 this.m_connection.close();
            } catch ( IOException e ) {
                 //ignore
            }
        }
    }
}
